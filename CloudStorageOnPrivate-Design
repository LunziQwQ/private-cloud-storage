CloudStorageOnPrivate-Design

需求分析：
	基础功能：
		1、公共可见空间 -- 允许下载 root用户登录上传
		2、以用户区分
			a、公开空间 -- 游客下载 登录上传
			b、私有空间 -- 登录下载 登录上传

		3、用户分享（某资源分享URL）:
			a、游客访问 -- 可下载
			b、登录访问 -- 可下载，可转存自身空间


实现细节：
	1、登录：
		权限组: ADMIN、MEMBER、GUEST(default)




接口约定(JSON)：
	body: json: ...
	1、登录 /login
		跳转到框架提供的登录页面，登录成功获得session，登录失败跳转到/login?error
		参数: "username", "password"


	2、注册 /register
		参数: "username", "password"
		返回: {
			result: true/false,
			message: "success"/"error message"
		}

		查询用户名是否占用 /isUsed
			参数: "username"
			返回: {isUsed: true/false}

	3、获取我的文件路径树 /myindex
		参数: "token"
		返回: {
			result: true/fasle,
			message: "success"/"error message",
			FileItem:{
				.../null
			}
		}

	4、获取他人文件路径树 /index
		参数: "username"(要访问的用户名)
		返回: {
			result: true/false
			message: "success"/"error message"
			FileItem: {
				.../null
			}
		}
	6、下载文件 /download
	7、上传文件 /upload
	8、生成分享链接 /getsharelink
		参数:  "FileItem:{ ... }"
		返回: {
			result: true/false,
			message: "success"/"error message",
			link: "Share URL"/null
		}
	9、访问分享链接 /share
		参数: "link", "token"(可选)
		返回: {
			result: true/false,
            message: "success"/"error message"
            FileItem{
            	.../null
            }
		}

	11、文件编辑 /edit/ ...
		参数: "behavior",  //"rename", "delete", "transfer", "move", "changeaccess"("toPublic"/"toPrivate")


后端数据结构设计：
	FileItem{
		val ownerName: String,
        val realPath: Path,
        val virtualPath: URL,
        val isUserRootPath: Boolean,
        val isDictionary: Boolean,
        var children: List<FileItem>,
        val isPublic: Boolean,
        val lastModified: Date,
        val size: Int
	}

	User{
		val name: String,
        val password: String,
        val space: Int,
        val publicFiles: List<FileItem>,
        val privateFiles: List<FileItem>,
        val sharedFiles: List<FileItem>
	}

