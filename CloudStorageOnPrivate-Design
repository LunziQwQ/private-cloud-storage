CloudStorageOnPrivate-Design

需求分析：
	基础功能：
		1、公共可见空间 -- 允许下载 root用户登录上传
		2、以用户区分
			a、公开空间 -- 游客下载 登录上传
			b、私有空间 -- 登录下载 登录上传

		3、用户分享（某资源分享URL）:
			a、游客访问 -- 可下载
			b、登录访问 -- 可下载，可转存自身空间


实现细节：
	1、登录：
		权限组: ADMIN、MEMBER、GUEST(default)




接口约定(JSON)：
	除了文件上传使用【form-data】、登录使用【x-www-form-urlencoded】以外，其他接口请求body均使用 raw(application/json)

	所有修改、下载文件等需要定位文件的，需要发送两个参数: path、name
	其中path是文件所在的路径，不包含文件名,开头和末尾都加上'\'，文件名为文件的名称，包含后缀名，开头末尾不带'\'


	【已完成】
		1、登录 /login.html
			使用【x-www-form-urlencoded】
			key: username    value: xxxxxxx
			key: password    value: xxxxxxx


		2、注册 /register
			参数: {
				"username": "....",
				"password": "....
			}
			返回: {
				result: true/false,
				message: "...."
			}

			查询用户名是否占用 /isUsed
				参数: {"username": "...."}
				返回: {
	                result: true/false,
	                message: "...."
	            }


		6、下载文件 /download
			参数: {
				"path": "...."
			}
			成功返回:
				文件流，application/octet-stream
			失败返回: {
				"result": true/false,
				"message": "...."
			}

		7、上传文件 /upload              【使用form-data形式】
			参数:
				key: file<File>  value: 选取的文件，可选多个
				key: path<String> value: 用户想要上传到的虚拟路径，如"Lunzi/Sex/，带末尾斜杠"
			返回:{
				"result": true/false,
				"message": "...."
			}

		文件改名 /rename
			参数: {
				"path": 用户的要更改的文件的虚拟路径（不包括文件名，带末尾斜杠）,
				"name": 文件名,
				"newName": "...."
			}
            返回:{
            	"result": true/false,
            	"message": "...."
            }

		文件删除 /delete
			参数: {
				"path": 用户的要更改的文件的虚拟路径（不包括文件名，带末尾斜杠）,
				"name": 文件名
			}
            返回:{
            	"result": true/false,
            	"message": "...."
            }

		文件移动 /move
			参数: {
				"path": 用户的要更改的文件的虚拟路径（不包括文件名，带末尾斜杠）,
				"name": 文件名,
				"newPath": 新的虚拟路径（包括文件名）
			}
            返回:{
            	"result": true/false,
            	"message": "...."
            }

		更改文件权限 /changeaccess
			参数: {
				"path": 用户的要更改的文件的虚拟路径（不包括文件名，带末尾斜杠）,
				"name": 文件名,
				"isPublic": true/false
			}
            返回:{
            	"result": true/false,
            	"message": "...."
            }

		转存文件 /transfer
			参数: {
				"path": 用户的要转存的文件的虚拟路径（不包括文件名，带末尾斜杠）,
				"name": 文件名,
				"newPath": 转存到自己空间的虚拟路径（不包括文件名，带末尾斜杠）
			}
            返回:{
            	"result": true/false,
            	"message": "...."
            }

	【未完成】
		3、获取我的文件路径树 /myindex
    		参数: "token"
    		返回: {
    			result: true/fasle,
    			message: "success"/"error message",
    			FileItem:{
    				.../null
    			}
    		}

    	4、获取他人文件路径树 /index
    		参数: "username"(要访问的用户名)
    		返回: {
    			result: true/false
    			message: "success"/"error message"
    			FileItem: {
    				.../null
    			}
    		}

    	8、生成分享链接 /getsharelink
            参数:  "FileItem:{ ... }"
            返回: {
            	result: true/false,
            	message: "success"/"error message",
            	link: "Share URL"/null
            }

        9、访问分享链接 /share
            参数: "link", "token"(可选)
            返回: {
            	result: true/false,
            	message: "success"/"error message"
            	FileItem{
            	    .../null
            	}
            }

后端数据结构设计：
	FileItem{
		@Id var virtualPath: String,
        val ownerName: String,
        val realPath: String,
        val isUserRootPath: Boolean,
        val isDictionary: Boolean,
        val size: Long,
        var virtualName: String,
        var children: List<FileItem>?,
        var isPublic: Boolean,
        var lastModified: Date
	}

	User{
	    @Id val id: Int = username.hashCode(),
        val username: String,
        val password: String,
        val space: Int? = 256000,
        val publicFiles: List<FileItem> = ArrayList(),
        val privateFiles: List<FileItem> = ArrayList(),
        val sharedFiles: List<FileItem> = ArrayList()
	}

